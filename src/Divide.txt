lw      0       1       one                 #$1 = 1
            lw      0       2       fourteen            #$2 = 14
            lw      0       3       dividend             #$3 = divined
            lw      0       4       one                 #$4 = 1
            lw      0       5       divisor             #$5 = divisor
            beq     3       0       Undefine            #if $3 = 0 then done
            beq     5       0       Undefine            #if $5 = 0 then done
loop_sw     add     7       1       7                   #move stack pointer $7 to next index
            sw      7       4       stack               #store $4 in stack where $7 at
            beq     7       2       load1               #check if $7 reach 14 bits
            add     4       4       4                   #shift left $4
            beq     0       0       loop_sw             #loop loop_sw
load1       lw      0       6       Minus               #$6 = -1
            lw      0       2       dividend             #$2 = divined
            lw      0       5       zero                #$5 = 0
msb         lw      7       4       stack               #load stack where $7 is to $4
            nand    4       2       5                   #$4 and $2 store to $5
            nand    5       5       5
            beq     5       4       load2               #check if $5 == $4 then go to load2
            add     7       6       7                   #move stack pointer to previous index
            beq     7       0       done                #if index = 0 then done
            beq     0       0       msb                 #loop msb
load2       lw      0       6       zero                #$6 = 0
            lw      0       3       zero                #$3 = 0
load3       lw      0       1       divisor             #$1 = divisor
            lw      0       5       one                 #$5 = 1
            nand    1       1       1                   #not $1
            add     1       5       1                   #make $1 to negative number
            beq     7       0       done                #if index = 0 then done
Divide      lw      7       4       stack               #load stack where $7 is to $4
            lw      0       5       zero                #$5 = 0
            add     6       6       6                   #left shift $6
            add     3       3       3                   #left shift $3
            nand    2       4       5                   #$2 and $4 and store to $5
            nand    5       5       5
            beq     5       0       skip_add            #check if $5 == 0 then skip_add
            lw      0       5       one                 #$5 = 1
            add     6       5       6                   #$6 plus 1 then store to $6
skip_add    add     6       1       1                   #$6 plus $1 store to $1
            lw      0       5       Minus               #$5 = -1
            add     7       5       7                   #move stack pointer to previous index
            lw      0       4       max                 #$4 = 16384
            nand    4       1       5                   #$4 and $1 store in $5
            nand    5       5       5
            beq     5       4       load3               #check if $1 is negative number then go load3
            lw      0       5       one                 #if $1 is not negative number then $5 = 1
            lw      0       1       divisor             #$1 = divisor
            nand    1       1       1                   #not $1
            add     1       5       1                   #make $1 to negative number
            add     6       1       6                   #$6 plus $1 store to $6
            add     3       5       3                   #collect result to $3
            beq     0       0       load3               #loop load3
Undefine    lw      0       3       zero
            lw      0       5       zero
done        halt
dividend   .fill   1784
divisor   .fill   159
zero      .fill   0
Minus     .fill   -1
one       .fill   1
max       .fill   16384
fourteen  .fill   14
stack     .fill   0