            lw      0   1   n
            lw      0   4   fib
            jalr    4   7
            halt
fibonacci   lw      0   4   pos1
            add     5   4   5
            sw      5   7   stack   # store ra
            add     5   4   5
            sw      5   1   stack   # store $1
            beq     1   4   one      # if n == 1
            beq     1   0   zero     # if n == 0
            lw      0   4   neg1    # load -1 to $4
            add     1   4   1       # n-1
            lw      0   4   fib    # prepare to jump $4 = addr of fib func
            jalr    4   7           # recursive call, store pc+1 at ra
            lw      0   4   neg1    # load -1 to $4
            add     1   4   1       # n-1-1
            lw      0   4   fib    # prepare to jump $4 = addr of fib func
            jalr    4   7           # recursive call, store pc+1 at ra
            lw      0   4   neg1
            lw      5   1   stack   # load $1
            add     5   4   5
            lw      5   7   stack   # load ra
            add     5   4   5
            jalr    7   0
one         lw     0   4   pos1    # load 1 to $4
            add    3   4   3       # $3+1 = $3 (return value)
            lw     0   4   neg1
            lw     5   1   stack   # load $1
            add    5   4   5
            lw     5   7   stack   # load ra
            add    5   4   5
            jalr   7   0           # return
zero        lw     0   4   neg1
            lw     5   1   stack   # load $1
            add    5   4   5
            lw     5   7   stack   # load ra
            add    5   4   5
            jalr   7   0           # return
fib .fill fibonacci
pos1 .fill 1
neg1 .fill -1
n .fill 3
stack .fill 0