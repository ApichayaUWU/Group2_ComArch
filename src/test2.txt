combination lw     0   4   neg3    # load -3 to $4
    add    5   4   5       # reserve sp for -3
    sw     5   7   2       # store ra at sp+2
    sw     5   1   1       # store $1 at sp+1
    sw     5   2   0       # store $2 at sp+0
    beq    2   0   bc      # r == 0
    beq    1   2   bc      # n == r
    lw     0   4   neg1    # load -1 to $4
    add    1   4   1       # n-1
    lw     0   4   comb    # prepare to jump $4 = addr of comb func
    jalr   4   7           # recursive call, store pc+1 at ra
    lw     0   4   neg1    # load -1 to $4
    add    1   4   1       # n-1
    lw     0   4   comb    # prepare to jump $4 = addr of comb func
    jalr   4   7           # recursive call, store pc+1 at ra
    lw     5   2   0
    lw     5   1   1
    lw     5   7   2
    lw     0   4   pos3    #load +3 to $4
    add    5   4   5       #Deallocate stack
    jalr   7   0           #return
 base_case   lw     0   4   pos1    #load 1 to $4
    add    3   4   3       #$3+1 = $3 (return value)
    lw     5   2   0
    lw     5   1   1
    lw     5   7   2
    lw     0   4   pos3    #load +3 to $4
    add    5   4   5       #Deallocate stack
    jalr   7   0           #return
pos1 .fill 1
neg1 .fill -1
pos3 .fill 3
neg3 .fill -3
n .fill 5
r .fill 3
bc .fill base_case
comb .fill combination
stack .fill 0